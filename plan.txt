VortexQuadTokenizer 图像编码方式是这样的：

1. 每个 token 由 4 个端点组成，编号为 0、1、2、3。
2. 每个端点同时开始，向右旋转生成整个当前层。
3. 每完成一层后，向外扩展到下一层。
4. 每层的生成都遵循相同的模式：从 0、1、2、3 起点开始，右旋生成四条旋臂，组成完整的层。

让我用 markdown 来准确展示这个结构：

```markdown
### 2x2 结构（第一层）
| 0 | 1 |
|---|---|
| 3 | 2 |

### 4x4 结构（前两层）
| 0 | 0 | 0 | 1 |
|---|---|---|---|
| 3 | 0 | 1 | 1 |
|---|---|---|---|
| 3 | 3 | 2 | 1 |
|---|---|---|---|
| 3 | 2 | 2 | 2 |

### 6x6 结构（前三层）
| 0 | 0 | 0 | 0 | 0 | 1 |
|---|---|---|---|---|---|
| 3 | 0 | 0 | 0 | 1 | 1 |
|---|---|---|---|---|---|
| 3 | 3 | 0 | 1 | 1 | 1 |
|---|---|---|---|---|---|
| 3 | 3 | 3 | 2 | 1 | 1 |
|---|---|---|---|---|---|
| 3 | 3 | 3 | 2 | 2 | 1 |
|---|---|---|---|---|---|
| 3 | 2 | 2 | 2 | 2 | 2 |
```

解释：
1. 第一层（2x2）：
   - 从四个角落的 0、1、2、3 同时开始，每个端点向右旋转生成其旋臂。

2. 第二层（4x4，包含第一层）：
   - 从新的四个角落 0、1、2、3 开始，同时向右旋转扩展。
   - 每个旋臂上的端点按 0、1、2、3 的顺序变化。
   - 形成了一个更大的结构，包含了第一层。

3. 第三层（6x6，包含前两层）：
   - 继续相同的模式，进一步向外扩展。
   - 保持从四个角落 0、1、2、3 开始，同时向右旋转的规律。

这种编码方式的特点：

1. 中心化：结构从中心向外扩展，中心区域有更高的信息密度。
2. 旋转模式：每层都遵循相同的 0→1→2→3 旋转模式。
3. 层次结构：每一层都包含并扩展了前一层的信息。
4. 空间连续性：相邻的 token 在端点值上往往是连续的。

位置编码：
- 每个 token 可以用 (r, θ) 来表示其位置。
- r 表示该 token 所在的层数（距离中心的距离）。
- θ 表示该 token 在当前层中的角度位置。

这种独特的编码方式为图像处理提供了一种新的多尺度表示方法，可能在某些特定任务中表现出独特的优势。
例如：任意分辨率的图像的训练和生成，图像扩展等